// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature AccessLevelOnImport -enable-upcoming-feature StrictConcurrency -enable-bare-slash-regex -module-name Moment
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Combine
import CoreFoundation
import CryptoKit
import Darwin
import Foundation
import MachO
@_exported import Moment
import Network
import NetworkExtension
import OSLog
import Security
import Swift
import SwiftUI
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol CashbackViewControllerDelegate : AnyObject {
  func cashbackViewControllerDidFinish(_ viewController: Moment.CashbackViewController)
  func cashbackViewController(_ viewController: Moment.CashbackViewController, didFailWithError error: Moment.CashbackError)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CashbackViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any Moment.CashbackViewControllerDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MomentCashbackService : Swift.Sendable {
  public static let shared: Moment.MomentCashbackService
  public static func setUserId(_ userId: Swift.String)
  @_Concurrency.MainActor public static func launchCashbackUI(onFinish: (() -> Swift.Void)? = nil, onFailure: ((any Swift.Error) -> Swift.Void)? = nil) -> Moment.CashbackUI
  @objc deinit
}
public enum CashbackError : Swift.Error {
  case userIdNotFound
  case initializationError(any Swift.Error)
}
extension Moment.CashbackError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class MomentConstants {
  public static let notificationKey: Swift.String
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct CashbackUI : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6Moment10CashbackUIV4bodyQrvp", 0) __
}
extension Moment.CashbackUI : Swift.Sendable {}
